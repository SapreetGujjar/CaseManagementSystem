@page "/caseprofile"

@using System.Net.Http.Json

@using CaseManagementSystem.Data.AgencyTypeCaseProfile;

@using CaseManagementSystem.Data.CaseProfiles

@using System.Net;

@using CaseManagementSystem.Data.Auth;

@inject IDialogService Dialog

@inject CaseProfileService CaseProfileService

@inject AgencyTypeCaseProfileService AgencyTypeCaseProfileService

@inject ISnackbar Snackbar

@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider

@inject NavigationManager NavigationManager

<style>
    .company-list-th {
        color: #5c6479 !important;
        font-size: 13px;
    }

    thead tr td {
        width: 25%;
    }

    .form-control .mud-input-control {
        display: block;
        width: 100%;
        padding: 0.3rem 1rem;
        font-size: 1.1rem;
        font-weight: 500;
        color: #5c6479;
        appearance: none;
        background-color: #5c64791f;
        background-clip: padding-box;
        border: 1px solid #5c647936;
        border-radius: 0.475rem;
        box-shadow: false;
        transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
    }

    .export-btn {
        position: relative;
    }

    .mud-input.mud-input-underline:before {
        border-bottom: 0px
    }

    .mud-input-control > .mud-input-control-input-container > div.mud-input.mud-input-text {
        margin-top: 0px;
    }

    .mud-table-root {
        padding-top: 8px;
    }

    .mud-table-cell {
        font-size: 12px;
    }

    .mud-table-toolbar {
        position: relative;
        flex-wrap: wrap;
        row-gap: 12px;
        height: 100%;
        width: 100%;
    }


    .mud-button-filled.mud-button-filled-primary {
        background-color: #774991 !important;
    }

        .mud-button-filled.mud-button-filled-primary:hover, .mud-button-filled.mud-button-filled-primary:focus-visible {
            background-color: #995FBA !important;
        }

    .mud-primary-text {
        color: #774991 !important;
    }
</style>

<PageTitle>Case Profile</PageTitle>

<MudText Typo="Typo.h5" Class="mb-2"><b>Case Profile</b></MudText>


<MudTable Items="@_caseProfiles" Hover="true" Filter="new Func<CaseProfileViewModel,bool>(FilterFuncCallBack)" @bind-SelectedItem="_selectedItem">

    <ToolBarContent>
        <div class="d-flex justify-space-between flex-grow-1 align-items-center mt-1">
        <div class="form-control">

            <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

        </div>

        <div class="me-2">

            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => OpenManageCaseProfileDialog(null))">Create</MudButton>

            </div>
        </div>

    </ToolBarContent>

    <HeaderContent>

        <MudTd>Case Description</MudTd>

        <MudTd>Time Limit Name</MudTd>

        <MudTd>Case Type Name</MudTd>

        <MudTd><span style="margin-left: 41px;">Actions</span></MudTd>

        @* <MudTd></MudTd> *@

    </HeaderContent>

    <RowTemplate>

        <MudTd DataLabel="Case Description">@context.CaseDescription</MudTd>

        <MudTd DataLabel="Time Limit Name">@context.TimeLimitName</MudTd>

        <MudTd DataLabel="Case Type Name">@context.CaseTypeName</MudTd>

        <MudTd Class="d-flex">

            <MudTd DataLabel="Edit" style="padding-right:0px; text-align:right;border-bottom: none;">

                <MudTooltip Text="Edit Case Profile" Color="Color.Primary" Placement="Placement.Top">

                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="Edit" OnClick="@((e) => OpenManageCaseProfileDialog(@context.Id))"></MudIconButton>

                </MudTooltip>

            </MudTd>

            <MudTd DataLabel="Remove" style="padding-left:0px;border-bottom: none;">

                <MudTooltip Text="Remove Case Profile" Color="Color.Primary" Placement="Placement.Top">

                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" aria-label="Remove" OnClick="@((e) => RemoveCaseProfile(@context.Id))"></MudIconButton>

                </MudTooltip>

            </MudTd>

        </MudTd>

    </RowTemplate>

    <PagerContent>

        <MudTablePager />

    </PagerContent>

</MudTable>

@code {

    private CaseProfileViewModel _selectedItem = null;

    private IEnumerable<CaseProfileViewModel> _caseProfiles = new List<CaseProfileViewModel>();

    private string _searchString = "";

    protected override async Task OnInitializedAsync()

    {

        if (!CustomAuthenticationStateProvider.IsAuthenticated())

        {

            NavigationManager.NavigateTo("/");

        }

        if (CustomAuthenticationStateProvider.RoleType() == "Client" || CustomAuthenticationStateProvider.RoleType() == "Agent")

        {

            NavigationManager.NavigateTo("/index");

        }

        await GetCaseProfiles();

    }

    private async Task GetCaseProfiles()

    {

        _caseProfiles = await CaseProfileService.GetAllCaseProfilesAsync();

    }

    private bool FilterFuncCallBack(CaseProfileViewModel caseProfile) => FilterFunc(caseProfile, _searchString);

    private bool FilterFunc(CaseProfileViewModel caseProfile, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ((caseProfile?.CaseDescription?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;
        if ((caseProfile?.TimeLimitName?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;
        if ((caseProfile?.CaseTypeName?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;
        return false;
    }

    private async Task OpenManageCaseProfileDialog(Guid? Id)

    {

        var parameters = new DialogParameters<ManageCaseProfile>();

        parameters.Add(x => x.Id, Id);

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Medium, CloseButton = true };

        DialogResult result = await Dialog.Show<ManageCaseProfile>("Case Profile", parameters, options).Result;

        if (!result.Canceled)

        {

            await GetCaseProfiles();

        }

    }

    private async Task RemoveCaseProfile(Guid id)

    {

        var parameters = new DialogParameters<ConfirmationDialogContent>();

        parameters.Add(x => x.ContentText, $"Do you really want to remove this case profile record?");

        parameters.Add(x => x.ButtonText, "Yes");

        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogResult result = await Dialog.Show<ConfirmationDialogContent>("Confirmation", parameters, options).Result;

        if (!result.Canceled)

        {

            await AgencyTypeCaseProfileService.DeleteAgencyTypeCaseProfileAsync(id);

            await CaseProfileService.DeleteCaseProfilesAsync(id);

            await GetCaseProfiles();

            Snackbar.Add($"Successfully removed case profile.", Severity.Success);

        }

    }

}
