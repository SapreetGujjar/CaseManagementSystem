@page "/forgot-password"

@using CaseManagementSystem.Data.Auth;
@using CaseManagementSystem.Data.Users;
@using CaseManagementSystem.Emails
@using CaseManagementSystem.Emails.Templates
@using CaseManagementSystem.Helpers

@inject UsersService UsersService
@inject NavigationManager NavigationManager
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject ICryptoService CryptoServices
@inject IConfiguration configuration;
@inject ISnackbar Snackbar
@inject IEmailService EMailService;

<MudCard>
    <MudForm @ref="_form">
        <MudCardContent>
            <MudText Typo="Typo.h5">Forgot Password</MudText>
            <MudTextField T="string" @bind-Value="_username" Label="Email address" Required="true" RequiredError="User name is required!" />
            <MudText Typo="Typo.subtitle2" Color="Color.Error">@_errorMessage</MudText>
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OnPasswordReset">Reset Password</MudButton>&nbsp;
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="OnCancel">Cancel</MudButton>
    </MudCardActions>
</MudCard>

@code {
    private string _username;
    private string _errorMessage;
    MudForm _form;

    protected void OnGet(string caseId = null)
    {
    }

    protected override async Task OnInitializedAsync()
    {
        if (CustomAuthenticationStateProvider.IsAuthenticated())
        {
            NavigationManager.NavigateTo("/index");
        }
    }

    private async Task OnCancel()
    {
        NavigationManager.NavigateTo("/login");
    }

    private async Task OnPasswordReset()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            UsersViewModel user = await UsersService.CheckLogin(_username);

            if (user != null)
            {
                Guid passwordResetRequestId = await UsersService.RequestResetPasswordAsync(user.EmailAddress);
                UserPasswordResetRequest uprr = new UserPasswordResetRequest();
                await uprr.Initialize(configuration.GetValue<string>("SiteUrl"), user.FirstName, passwordResetRequestId, user.EmailAddress);
               // await EMailService.SendEmailNotificationAsync(uprr, user.EmailAddress, null);
                Snackbar.Add($"An email was sent to the your email address {user.EmailAddress} with a link to reset the password. The link is valid for 15 minutes.", Severity.Info);
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                _errorMessage = "Invalid username.";
            }
        }
    }
}