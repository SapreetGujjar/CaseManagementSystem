@page "/reset-password/{resetPwrdRequestId?}"

@using CaseManagementSystem.Data.Auth;
@using CaseManagementSystem.Data.Users;
@using System.Text.RegularExpressions;
@using CaseManagementSystem.Emails.Templates
@using CaseManagementSystem.Helpers

@inject UsersService UserService
@inject ISnackbar Snackbar
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject NavigationManager NavigationManager

<MudCard>
    <MudForm @ref="_form">
        <MudCardContent>
            @if (_loading)
            {
                <MudProgressLinear Indeterminate="true" Color="@Color.Info" Style="position:absolute;top:0;right:0" />
            }
            <MudPaper Elevation="0">
                <MudGrid Spacing="2">
                    <MudItem xs="12">
                        <MudTextField T="string" InputType="InputType.Password" @bind-Value="_newPassword" Label="New Password" Variant="Variant.Outlined" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true" RequiredError="Password is required!" @ref="_pwField"></MudTextField>
                    </MudItem>
                    <MudItem xs="12">
                        <MudTextField T="string" InputType="InputType.Password" Label="Confirm Password" Variant="Variant.Outlined" Validation="@(new Func<string, string>(PasswordMatch))"></MudTextField>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudCardContent>
    </MudForm>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SavePassword">Save</MudButton>
    </MudCardActions>
</MudCard>

@code {
    [ParameterAttribute]
    public string? resetPwrdRequestId { get; set; }

    private MudForm _form;    
    private MudTextField<string> _pwField;
    private bool _loading = true;
    private string _newPassword = "";

    protected override async Task OnInitializedAsync()
    {
        _loading = false;
        if (resetPwrdRequestId == null)
            NavigationManager.NavigateTo("/index");
        else
        {
            CryptoService cs = new CryptoService();
            try
            {
                resetPwrdRequestId = cs.DecryptStringEscaped(resetPwrdRequestId);
            }
            catch
            {
                NavigationManager.NavigateTo("/index");
            }
        }

    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8.";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter.";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter.";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit.";
    }

    private string PasswordMatch(string arg)
    {
        if (_pwField.Value != arg)
            return "Passwords don't match";
        return null;
    }

    private async Task SavePassword()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            try
            {
                await UserService.ResetPasswordAsync(new Guid(resetPwrdRequestId), _newPassword);

                Snackbar.Add("Successfully saved password.", Severity.Success);
                // UserPasswordResetCompleted prrc = new UserPasswordResetCompleted();

                NavigationManager.NavigateTo("/login");
            }
            catch (Exception ex)
            {
                Snackbar.Add("Error! " + ex.Message, Severity.Error);
            }
        }
    }
}