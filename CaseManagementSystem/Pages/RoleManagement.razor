@page "/rolemanagement"

@using System.Net.Http.Json
@using CaseManagementSystem.Data.Auth;
@using CaseManagementSystem.Data.Users

@inject IDialogService Dialog
@inject UsersService UsersService
@inject ISnackbar Snackbar
@inject CustomAuthenticationStateProvider CustomAuthenticationStateProvider
@inject NavigationManager NavigationManager


<style>
    .form-control .mud-input-control {
        display: block;
        width: 100%;
        padding: 0.3rem 1rem;
        font-size: 1.1rem;
        font-weight: 500;
        color: #5c6479;
        appearance: none;
        background-color: #5c64791f;
        background-clip: padding-box;
        border: 1px solid #5c647936;
        border-radius: 0.475rem;
        box-shadow: false;
        transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
    }

    .mud-input-control > .mud-input-control-input-container > div.mud-input.mud-input-text {
        margin-top: 0px;
    }

    .mud-input.mud-input-underline:before {
        border-bottom: 0px
    }

    .mud-table-cell {
        font-size: 12px;
    }

    .mud-table-root {
        padding-top: 8px;
    }


    .mud-button-filled.mud-button-filled-primary {
        background-color: #774991 !important;
    }

        .mud-button-filled.mud-button-filled-primary:hover, .mud-button-filled.mud-button-filled-primary:focus-visible {
            background-color: #995FBA !important;
        }

    .mud-primary-text {
        color: #774991 !important;
    }
</style>
<PageTitle>Role Management</PageTitle>
<MudText Class="mb-2" Typo="Typo.h5"> <b>Role Management</b></MudText>

<MudTable Items="@_users" Hover="true" Filter="new Func<UsersViewModel,bool>(FilterFuncCallBack)" @bind-SelectedItem="_selectedItem">
    <ToolBarContent>
        <div class="form-control">
            <MudTextField @bind-Value="_searchString" Immediate="true" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </div>
    </ToolBarContent>
    <HeaderContent>
        <!--        <MudTh>Username</MudTh>-->
        <MudTh>Role</MudTh>
        <MudTh>Firstname</MudTh>
        <MudTh>Lastname</MudTh>
        <MudTh>User Email</MudTh>
        <MudTh>Company</MudTh>
        <MudTh>Actions</MudTh>
        @*  <MudTh></MudTh> *@
    </HeaderContent>
    <RowTemplate>
        <!--        <MudTd DataLabel="Username">@context.UserName</MudTd>-->
        <MudTd DataLabel="Role">@context.GetRoleTypeName()</MudTd>
        <MudTd DataLabel="Firstname">@context.FirstName</MudTd>
        <MudTd DataLabel="Lastname">@context.LastName</MudTd>
        <MudTd DataLabel="User Email">@context.EmailAddress</MudTd>
        <MudTd DataLabel="Company">@context.CompanyName</MudTd>
        <MudTd style="padding:0px; margin:0px" DataLabel="Edit">
            <MudTooltip Text="Edit User Role" Color="Color.Primary" Placement="Placement.Top">
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" aria-label="Edit" OnClick="@((e) => OpenManageUserRoleDialog(@context.Id))"></MudIconButton>
            </MudTooltip>
            <MudTooltip Text="Remove User Role" Color="Color.Primary" Placement="Placement.Top">
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" aria-label="Edit" OnClick="@((e) => RemoveUserRole(@context.Id))"></MudIconButton>
            </MudTooltip>
        </MudTd>
        @*  <MudTd style="padding:0px; margin:0px" DataLabel="Remove">
        <MudTooltip Text="Remove User Role" Color="Color.Primary" Placement="Placement.Top">
        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" aria-label="Edit" OnClick="@((e) => RemoveUserRole(@context.Id))"></MudIconButton>
        </MudTooltip>
        </MudTd> *@
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private UsersViewModel _selectedItem = null;
    private IEnumerable<UsersViewModel> _users = new List<UsersViewModel>();
    private string _searchString = "";
    private UsersViewModel _currentLoginUser = new UsersViewModel();

    protected override async Task OnInitializedAsync()
    {
        if (!CustomAuthenticationStateProvider.IsAuthenticated())
        {
            NavigationManager.NavigateTo("/");
        }

        if (CustomAuthenticationStateProvider.RoleType() == "Agent")
        {
            NavigationManager.NavigateTo("/index");
        }

        _currentLoginUser = await UsersService.CheckLogin(CustomAuthenticationStateProvider.UserName());
        await GetUsers();
    }

    private async Task GetUsers()
    {
        if (CustomAuthenticationStateProvider.RoleType() != "InternalAdmin")
        {
            _users = await UsersService.GetAllUsersByClientAsync(_currentLoginUser.Id);
        }
        else
        {
            _users = await UsersService.GetAllUsersAsync();
        }
    }

    private bool FilterFuncCallBack(UsersViewModel user) => FilterFunc(user, _searchString);

    private bool FilterFunc(UsersViewModel user, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        //        if ((user?.UserName?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
        //            return true;
        if ((user?.FirstName?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;
        if ((user?.LastName?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;
        if ((user?.GetRoleTypeName()?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;
        if ((user?.EmailAddress?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;
        if ((user?.CompanyName?.Contains(searchString, StringComparison.OrdinalIgnoreCase)) ?? false)
            return true;

        return false;
    }

    private async Task OpenManageUserRoleDialog(Guid Id)
    {
        var parameters = new DialogParameters<ManageRole>();
        parameters.Add(x => x.Id, Id);

        DialogOptions options = new DialogOptions() { MaxWidth = MaxWidth.Medium, CloseButton = true };

        DialogResult result = await Dialog.Show<ManageRole>("User Role", parameters, options).Result;

        if (!result.Canceled)
        {
            await GetUsers();
        }
    }

    private async Task RemoveUserRole(Guid id)
    {
        var parameters = new DialogParameters<ConfirmationDialogContent>();
        parameters.Add(x => x.ContentText, $"Do you really want to remove role from this record?");
        parameters.Add(x => x.ButtonText, "Yes");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogResult result = await Dialog.Show<ConfirmationDialogContent>("Confirmation", parameters, options).Result;

        if (!result.Canceled)
        {
            await UsersService.UpdateUsersRoleTypeAsync(id, null, _currentLoginUser.Id);
            await GetUsers();

            Snackbar.Add($"Successfully removed role from user.", Severity.Success);
        }
    }
}